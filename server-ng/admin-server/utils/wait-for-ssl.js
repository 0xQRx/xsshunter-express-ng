/**
 * Wait for SSL certificates to be generated by Greenlock
 */

const fs = require('fs');
const path = require('path');

/**
 * Wait for Let's Encrypt certificates with retries
 * @param {string} hostname - The hostname to check certificates for
 * @param {number} maxRetries - Maximum number of retries (default: 20)
 * @param {number} retryDelay - Delay between retries in ms (default: 30000)
 * @returns {Promise<{cert: Buffer, key: Buffer} | null>}
 */
async function waitForSSLCertificates(hostname, maxRetries = 20, retryDelay = 30000) {
    if (!hostname) {
        console.log('[SSL Wait] No hostname provided, skipping certificate wait');
        return null;
    }

    const greenlockDir = '/app/greenlock.d';  // Absolute path matching Docker setup
    const liveDir = path.join(greenlockDir, 'live', hostname);
    
    console.log(`[SSL Wait] Waiting for Let's Encrypt certificates for ${hostname}`);
    console.log(`[SSL Wait] Checking directory: ${liveDir}`);
    
    // Show banner on first attempt
    console.log('\n' + '='.repeat(60));
    console.log('ðŸ“Œ IMPORTANT: Certificate Generation');
    console.log('='.repeat(60));
    console.log(`To trigger certificate generation, please visit:`);
    console.log(`   https://${hostname}`);
    console.log(`\nThe certificate will be automatically generated on first visit.`);
    console.log('='.repeat(60) + '\n');
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            // Check if certificate files exist
            const certPath = path.join(liveDir, 'fullchain.pem');
            const keyPath = path.join(liveDir, 'privkey.pem');
            
            if (fs.existsSync(certPath) && fs.existsSync(keyPath)) {
                console.log(`[SSL Wait] Certificates found after ${attempt} attempts!`);
                
                // Read and return certificates
                const cert = fs.readFileSync(certPath);
                const key = fs.readFileSync(keyPath);
                
                return { cert, key };
            }
        } catch (err) {
            // Ignore errors, we'll retry
        }
        
        if (attempt < maxRetries) {
            if (attempt === 1) {
                console.log(`[SSL Wait] Certificates not found, waiting... (checking every ${retryDelay/1000}s)`);
            } else if (attempt % 5 === 0) {
                console.log(`[SSL Wait] Still waiting... (${attempt}/${maxRetries} attempts)`);
            }
            await new Promise(resolve => setTimeout(resolve, retryDelay));
        }
    }
    
    console.log(`[SSL Wait] Certificates not found after ${maxRetries} attempts`);
    return null;
}

module.exports = {
    waitForSSLCertificates
};